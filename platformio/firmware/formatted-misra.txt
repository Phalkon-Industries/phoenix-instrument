Appendix A Summary of guidelines
Dir 1.1 Required
Any implementation-defined behaviour on which the output of the
Dir 2.1 Required
All source files shall compile without any compilation errors
Dir 3.1 Required
All code shall be traceable to documented requirements
Dir 4.1 Required
Run-time failures shall be minimized
Dir 4.2 Advisory
All usage of assembly language should be documented
Dir 4.3 Required
Assembly language shall be encapsulated and isolated
Dir 4.4 Advisory
Sections of code should not be “commented out”
Dir 4.5 Advisory
Identifiers in the same name space with overlapping visibility should be
Dir 4.6 Advisory
typedefs that indicate size and signedness should be used in place of
Dir 4.7 Required
If a function returns error information, then that error information shall
Dir 4.8 Advisory
If a pointer to a structure or union is never dereferenced within a
Dir 4.9 Advisory
A function should be used in preference to a function-like macro where
Dir 4.10 Required
Precautions shall be taken in order to prevent the contents of a header
Dir 4.11 Required
The validity of values passed to library functions shall be checked
Dir 4.12 Required
Dynamic memory allocation shall not be used
Dir 4.13 Advisory
Functions which are designed to provide operations on a resource
Dir 4.14 Required
The validity of values received from external sources shall be checked
Dir 4.15 Required
Evaluation of floating-point expressions shall not lead to the undetected
Dir 5.1 Required
There shall be no data races between threads
Dir 5.2 Required
There shall be no deadlocks between threads
Dir 5.3 Required
There shall be no dynamic thread creation
Rule 1.1 Required
The program shall contain no violations of the standard C syntax and
Rule 1.2 Advisory
Language extensions should not be used
Rule 1.3 Required
There shall be no occurrence of undefined or critical unspecified
Rule 1.4 Required
Emergent language features shall not be used
Rule 1.5 Required
Obsolescent language features shall not be used
Rule 2.1 Required
A project shall not contain unreachable code
Rule 2.2 Required
A project shall not contain dead code
Rule 2.3 Advisory
A project should not contain unused type declarations
Rule 2.4 Advisory
A project should not contain unused tag declarations
Rule 2.5 Advisory
A project should not contain unused macro definitions
Rule 2.6 Advisory
A function should not contain unused label declarations
Rule 2.7 Advisory
A function should not contain unused parameters
Rule 2.8 Advisory
A project should not contain unused object definitions
Rule 3.1 Required
The character sequences /* and // shall not be used within a comment
Rule 3.2 Required
Line-splicing shall not be used in // comments
Rule 4.1 Required
Octal and hexadecimal escape sequences shall be terminated
Rule 4.2 Advisory
Trigraphs should not be used
Rule 5.1 Required
External identifiers shall be distinct
Rule 5.2 Required
Identifiers declared in the same scope and name space shall be distinct
Rule 5.3 Required
An identifier declared in an inner scope shall not hide an identifier
Rule 5.4 Required
Macro identifiers shall be distinct
Rule 5.5 Required
Identifiers shall be distinct from macro names
Rule 5.6 Required
A typedef name shall be a unique identifier
Rule 5.7 Required
A tag name shall be a unique identifier
Rule 5.8 Required
Identifiers that define objects or functions with external linkage shall be
Rule 5.9 Advisory
Identifiers that define objects or functions with internal linkage should
Rule 6.1 Required
Bit-fields shall only be declared with an appropriate type
Rule 6.2 Required
Single-bit named bit-fields shall not be of a signed type
Rule 6.3 Required
A bit field shall not be declared as a member of a union
Rule 7.1 Required
Octal constants shall not be used
Rule 7.2 Required
A “u” or “U” suffix shall be applied to all integer constants that are
Rule 7.3 Required
The lowercase character “l” shall not be used in a literal suffix
Rule 7.4 Required
A string literal shall not be assigned to an object unless the object’s type
Rule 7.5 Mandatory
The argument of an integer constant macro shall have an appropriate
Rule 7.6 Required
The small integer variants of the minimum-width integer constant
Rule 8.1 Required
Types shall be explicitly specified
Rule 8.2 Required
Function types shall be in prototype form with named parameters
Rule 8.3 Required
All declarations of an object or function shall use the same names and
Rule 8.4 Required
A compatible declaration shall be visible when an object or function with
Rule 8.5 Required
An external object or function shall be declared once in one and only
Rule 8.6 Required
An identifier with external linkage shall have exactly one external
Rule 8.7 Advisory
Functions and objects should not be defined with external linkage if they
Rule 8.8 Required
The static storage class specifier shall be used in all declarations of
Rule 8.9 Advisory
An object should be declared at block scope if its identifier only appears
Rule 8.10 Required
An inline function shall be declared with the static storage class
Rule 8.11 Advisory
When an array with external linkage is declared, its size should be
Rule 8.12 Required
Within an enumerator list, the value of an implicitly-specified
Rule 8.13 Advisory
A pointer should point to a const-qualified type whenever possible
Rule 8.14 Required
The restrict type qualifier shall not be used
Rule 8.15 Required
All declarations of an object with an explicit alignment specification shall
Rule 8.16 Advisory
The alignment specification of zero should not appear in an object
Rule 8.17 Advisory
At most one explicit alignment specifier should appear in an object
Rule 9.1 Mandatory
The value of an object with automatic storage duration shall not be read
Rule 9.2 Required
The initializer for an aggregate or union shall be enclosed in braces
Rule 9.3 Required
Arrays shall not be partially initialized
Rule 9.4 Required
An element of an object shall not be initialized more than once
Rule 9.5 Required
Where designated initializers are used to initialize an array object the
Rule 9.6 Required
An initializer using chained designators shall not contain initializers
Rule 9.7 Mandatory
Atomic objects shall be appropriately initialized before being accessed
Rule 10.1 Required
Operands shall not be of an inappropriate essential type
Rule 10.2 Required
Expressions of essentially character type shall not be used
Rule 10.3 Required
The value of an expression shall not be assigned to an object with a
Rule 10.4 Required
Both operands of an operator in which the usual arithmetic conversions
Rule 10.5 Advisory
The value of an expression should not be cast to an inappropriate
Rule 10.6 Required
The value of a composite expression shall not be assigned to an object
Rule 10.7 Required
If a composite expression is used as one operand of an operator in
Rule 10.8 Required
The value of a composite expression shall not be cast to a different
Rule 11.1 Required
Conversions shall not be performed between a pointer to a function and
Rule 11.2 Required
Conversions shall not be performed between a pointer to an incomplete
Rule 11.3 Required
A conversion shall not be performed between a pointer to object type
Rule 11.4 Advisory
A conversion should not be performed between a pointer to object and
Rule 11.5 Advisory
A conversion should not be performed from pointer to void into pointer
Rule 11.6 Required
A cast shall not be performed between pointer to void and an arithmetic
Rule 11.7 Required
A cast shall not be performed between pointer to object and a non-
Rule 11.8 Required
A conversion shall not remove any const, volatile or _Atomic qualification
Rule 11.9 Required
The macro NULL shall be the only permitted form of integer null pointer
Rule 11.10 Required
The _Atomic qualifier shall not be applied to the incomplete type void
Rule 12.1 Advisory
The precedence of operators within expressions should be made explicit
Rule 12.2 Required
The right hand operand of a shift operator shall lie in the range zero to
Rule 12.3 Advisory
The comma operator should not be used
Rule 12.4 Advisory
Evaluation of constant expressions should not lead to unsigned integer
Rule 12.5 Mandatory
The sizeof operator shall not have an operand which is a function
Rule 12.6 Required
Structure and union members of atomic objects shall not be directly
Rule 13.1 Required
Initializer lists shall not contain persistent side effects
Rule 13.2 Required
The value of an expression and its persistent side effects shall be the
Rule 13.3 Advisory
A full expression containing an increment (++) or decrement (--) operator
Rule 13.4 Advisory
The result of an assignment operator should not be used
Rule 13.5 Required
The right hand operand of a logical && or || operator shall not contain
Rule 13.6 Required
The operand of the sizeof operator shall not contain any expression
Rule 14.1 Required
A loop counter shall not have essentially floating type
Rule 14.2 Required
A for loop shall be well-formed
Rule 14.3 Required
Controlling expressions shall not be invariant
Rule 14.4 Required
The controlling expression of an if statement and the controlling
Rule 15.1 Advisory
The goto statement should not be used
Rule 15.2 Required
The goto statement shall jump to a label declared later in the same
Rule 15.3 Required
Any label referenced by a goto statement shall be declared in the same
Rule 15.4 Advisory
There should be no more than one break or goto statement used to
Rule 15.5 Advisory
A function should have a single point of exit at the end
Rule 15.6 Required
The body of an iteration-statement or a selection-statement shall be a
Rule 15.7 Required
All if … else if constructs shall be terminated with an else statement
Rule 16.1 Required
All switch statements shall be well-formed
Rule 16.2 Required
A switch label shall only be used when the most closely-enclosing
Rule 16.3 Required
An unconditional break statement shall terminate every switch-clause
Rule 16.4 Required
Every switch statement shall have a default label
Rule 16.5 Required
A default label shall appear as either the first or the last switch label of a
Rule 16.6 Required
Every switch statement shall have at least two switch-clauses
Rule 16.7 Required
A switch-expression shall not have essentially Boolean type
Rule 17.1 Required
The standard header file <stdarg.h> shall not be used
Rule 17.2 Required
Functions shall not call themselves, either directly or indirectly
Rule 17.3 Mandatory
A function shall not be declared implicitly
Rule 17.4 Mandatory
All exit paths from a function with non-void return type shall have an
Rule 17.5 Required
The function argument corresponding to a parameter declared to have
Rule 17.6 Mandatory
The declaration of an array parameter shall not contain the static
Rule 17.7 Required
The value returned by a function having non-void return type shall be
Rule 17.8 Advisory
A function parameter should not be modified
Rule 17.9 Mandatory
A function declared with a _Noreturn function specifier shall not return
Rule 17.10 Required
A function declared with a _Noreturn function specifier shall have void
Rule 17.11 Advisory
A function that never returns should be declared with a _Noreturn
Rule 17.12 Advisory
A function identifier should only be used with either a preceding &, or
Rule 17.13 Required
A function type shall not be type qualified
Rule 18.1 Required
A pointer resulting from arithmetic on a pointer operand shall address
Rule 18.2 Required
Subtraction between pointers shall only be applied to pointers that
Rule 18.3 Required
The relational operators >, >=, < and <= shall not be applied to
Rule 18.4 Advisory
The +, -, += and -= operators should not be applied to an expression of
Rule 18.5 Advisory
Declarations should contain no more than two levels of pointer nesting
Rule 18.6 Required
The address of an object with automatic or thread-local storage shall not
Rule 18.7 Required
Flexible array members shall not be declared
Rule 18.8 Required
Variable-length arrays shall not be used
Rule 18.9 Required
An object with temporary lifetime shall not undergo array-to-pointer
Rule 18.10 Mandatory
Pointers to variably-modified array types shall not be used
Rule 19.1 Mandatory
An object shall not be assigned or copied to an overlapping object
Rule 19.2 Advisory
The union keyword should not be used
Rule 20.1 Advisory
#include directives should only be preceded by preprocessor directives
Rule 20.2 Required
The ', " or \ characters and the /* or // character sequences shall not
Rule 20.3 Required
The #include directive shall be followed by either a <filename> or
Rule 20.4 Required
A macro shall not be defined with the same name as a keyword
Rule 20.5 Advisory
#undef should not be used
Rule 20.6 Required
Tokens that look like a preprocessing directive shall not occur within a
Rule 20.7 Required
Expressions resulting from the expansion of macro parameters shall be
Rule 20.8 Required
The controlling expression of a #if or #elif preprocessing directive shall
Rule 20.9 Required
All identifiers used in the controlling expression of #if or #elif
Rule 20.10 Advisory
The # and ## preprocessor operators should not be used
Rule 20.11 Required
A macro parameter immediately following a # operator shall not
Rule 20.12 Required
A macro parameter used as an operand to the # or ## operators, which
Rule 20.13 Required
A line whose first token is # shall be a valid preprocessing directive
Rule 20.14 Required
All #else, #elif and #endif preprocessor directives shall reside in the
Rule 21.1 Required
#define and #undef shall not be used on a reserved identifier or
Rule 21.2 Required
A reserved identifier or reserved macro name shall not be declared
Rule 21.3 Required
The memory allocation and deallocation functions of <stdlib.h> shall not
Rule 21.4 Required
The standard header file <setjmp.h> shall not be used
Rule 21.5 Required
The standard header file <signal.h> shall not be used
Rule 21.6 Required
The Standard Library input/output functions shall not be used
Rule 21.7 Required
The Standard Library functions atof, atoi, atol and atoll of <stdlib.h> shall
Rule 21.8 Required
The Standard Library termination functions of <stdlib.h> shall not be
Rule 21.9 Required
The Standard Library functions bsearch and qsort of <stdlib.h> shall not
Rule 21.10 Required
The Standard Library time and date functions shall not be used
Rule 21.11 Advisory
The standard header file <tgmath.h> should not be used
Rule 21.12 Required
The standard header file <fenv.h> shall not be used
Rule 21.13 Mandatory
Any value passed to a function in <ctype.h> shall be representable as an
Rule 21.14 Required
The Standard Library function memcmp shall not be used to compare
Rule 21.15 Required
The pointer arguments to the Standard Library functions memcpy,
Rule 21.16 Required
The pointer arguments to the Standard Library function memcmp shall
Rule 21.17 Mandatory
Use of the string handling functions from <string.h> shall not result in
Rule 21.18 Mandatory
The size_t argument passed to any function in <string.h> shall have an
Rule 21.19 Mandatory
The pointers returned by the Standard Library functions localeconv,
Rule 21.20 Mandatory
The pointer returned by the Standard Library functions asctime, ctime,
Rule 21.21 Required
The Standard Library function system of <stdlib.h> shall not be used
Rule 21.22 Mandatory
All operand arguments to any type-generic macros declared in
Rule 21.23 Required
All operand arguments to any multi-argument type-generic macros
Rule 21.24 Required
The random number generator functions of <stdlib.h> shall not be used
Rule 21.25 Required
All memory synchronization operations shall be executed in sequentially
Rule 21.26 Required
The Standard Library function mtx_timedlock() shall only be invoked on
Rule 22.1 Required
All resources obtained dynamically by means of Standard Library
Rule 22.2 Mandatory
A block of memory shall only be freed if it was allocated by means of a
Rule 22.3 Required
The same file shall not be open for read and write access at the same
Rule 22.4 Mandatory
There shall be no attempt to write to a stream which has been opened
Rule 22.5 Mandatory
A pointer to a FILE object shall not be dereferenced
Rule 22.6 Mandatory
The value of a pointer to a FILE shall not be used after the associated
Rule 22.7 Required
The macro EOF shall only be compared with the unmodified return value
Rule 22.8 Required
The value of errno shall be set to zero prior to a call to an errno-setting-
Rule 22.9 Required
The value of errno shall be tested against zero after calling an errno-
Rule 22.10 Required
The value of errno shall only be tested when the last function to be
Rule 22.11 Required
A thread that was previously either joined or detached shall not be
Rule 22.12 Mandatory
Thread objects, thread synchronization objects, and thread-specific
Rule 22.13 Required
Thread objects, thread synchronization objects and thread-specific
Rule 22.14 Mandatory
Thread synchronization objects shall be initialized before being accessed
Rule 22.15 Required
Thread synchronization objects and thread-specific storage pointers
Rule 22.16 Required
All mutex objects locked by a thread shall be explicitly unlocked by the
Rule 22.17 Required
No thread shall unlock a mutex or call cnd_wait() or cnd_timedwait() for a
Rule 22.18 Required
Non-recursive mutexes shall not be recursively locked
Rule 22.19 Required
A condition variable shall be associated with at most one mutex object
Rule 22.20 Mandatory
Thread-specific storage pointers shall be created before being accessed
Rule 23.1 Advisory
A generic selection should only be expanded from a macro
Rule 23.2 Required
A generic selection that is not expanded from a macro shall not contain
Rule 23.3 Advisory
A generic selection should contain at least one non-default association
Rule 23.4 Required
A generic association shall list an appropriate type
Rule 23.5 Advisory
A generic selection should not depend on implicit pointer type
Rule 23.6 Required
The controlling expression of a generic selection shall have an essential
Rule 23.7 Advisory
A generic selection that is expanded from a macro should evaluate its
Rule 23.8 Required
A default association shall appear as either the first or the last
